<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="31" passed="27" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-06-17T15:15:16 CEST" name="All Test Suite" finished-at="2023-06-17T15:15:29 CEST" duration-ms="12433">
    <groups>
    </groups>
    <test started-at="2023-06-17T15:15:16 CEST" name="/Users/uroskatanic/IdeaProjects/REST-Assured-Framework" finished-at="2023-06-17T15:15:29 CEST" duration-ms="12433">
      <class name="tests.fake_google_maps_api.create_place">
        <test-method signature="TestCase01()[pri:0, instance:tests.fake_google_maps_api.create_place@57e4b86c]" started-at="2023-06-17T15:15:25 CEST" name="TestCase01" finished-at="2023-06-17T15:15:26 CEST" duration-ms="1004" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase01 -->
        <test-method signature="TestCase02()[pri:0, instance:tests.fake_google_maps_api.create_place@57e4b86c]" started-at="2023-06-17T15:15:26 CEST" name="TestCase02" finished-at="2023-06-17T15:15:26 CEST" duration-ms="375" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase02 -->
        <test-method signature="TestCase03()[pri:0, instance:tests.fake_google_maps_api.create_place@57e4b86c]" started-at="2023-06-17T15:15:26 CEST" name="TestCase03" finished-at="2023-06-17T15:15:26 CEST" duration-ms="336" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase03 -->
      </class> <!-- tests.fake_google_maps_api.create_place -->
      <class name="tests.Google_Maps_POJO.first_test">
        <test-method signature="testCase()[pri:0, instance:tests.Google_Maps_POJO.first_test@12fccff0]" started-at="2023-06-17T15:15:28 CEST" name="testCase" finished-at="2023-06-17T15:15:29 CEST" duration-ms="545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase -->
      </class> <!-- tests.Google_Maps_POJO.first_test -->
      <class name="tests.fake_google_maps_api.update_place">
        <test-method signature="TestCase03()[pri:0, instance:tests.fake_google_maps_api.update_place@7757025d]" started-at="2023-06-17T15:15:28 CEST" name="TestCase03" finished-at="2023-06-17T15:15:28 CEST" duration-ms="366" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase03 -->
      </class> <!-- tests.fake_google_maps_api.update_place -->
      <class name="tests.fake_google_maps_api.get_data_for_place_POJO">
        <test-method signature="get_data()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place_POJO@52c46334]" started-at="2023-06-17T15:15:28 CEST" name="get_data" finished-at="2023-06-17T15:15:28 CEST" duration-ms="382" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- get_data -->
      </class> <!-- tests.fake_google_maps_api.get_data_for_place_POJO -->
      <class name="tests.fake_google_maps_api.get_data_for_place">
        <test-method signature="TestCase01_Get_Data_for_Place()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:22 CEST" name="TestCase01_Get_Data_for_Place" finished-at="2023-06-17T15:15:23 CEST" duration-ms="361" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase01_Get_Data_for_Place -->
        <test-method signature="TestCase02_Check_Name()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:23 CEST" name="TestCase02_Check_Name" finished-at="2023-06-17T15:15:23 CEST" duration-ms="354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase02_Check_Name -->
        <test-method signature="testCase03_PlaceID_New()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:23 CEST" name="testCase03_PlaceID_New" finished-at="2023-06-17T15:15:23 CEST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase03_PlaceID_New -->
        <test-method signature="testCase04_Check_address()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:23 CEST" name="testCase04_Check_address" finished-at="2023-06-17T15:15:24 CEST" duration-ms="354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase04_Check_address -->
        <test-method signature="testCase05_Check_types()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:24 CEST" name="testCase05_Check_types" finished-at="2023-06-17T15:15:24 CEST" duration-ms="356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase05_Check_types -->
        <test-method signature="testCase06_Check_language()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:24 CEST" name="testCase06_Check_language" finished-at="2023-06-17T15:15:24 CEST" duration-ms="348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase06_Check_language -->
        <test-method signature="testCase07_Check_website()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:24 CEST" name="testCase07_Check_website" finished-at="2023-06-17T15:15:25 CEST" duration-ms="416" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase07_Check_website -->
        <test-method signature="testCase08_Ceheck_body()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@4adf3582]" started-at="2023-06-17T15:15:25 CEST" name="testCase08_Ceheck_body" finished-at="2023-06-17T15:15:25 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase08_Ceheck_body -->
      </class> <!-- tests.fake_google_maps_api.get_data_for_place -->
      <class name="tests.fake_google_maps_api.delete_place">
        <test-method signature="testCase01DeleteJustCreatedPlace()[pri:0, instance:tests.fake_google_maps_api.delete_place@589dfa6f]" started-at="2023-06-17T15:15:26 CEST" name="testCase01DeleteJustCreatedPlace" finished-at="2023-06-17T15:15:27 CEST" duration-ms="568" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase01DeleteJustCreatedPlace -->
        <test-method signature="testCase02DeleteNotExistingPlaceID()[pri:0, instance:tests.fake_google_maps_api.delete_place@589dfa6f]" started-at="2023-06-17T15:15:27 CEST" name="testCase02DeleteNotExistingPlaceID" finished-at="2023-06-17T15:15:28 CEST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase02DeleteNotExistingPlaceID -->
      </class> <!-- tests.fake_google_maps_api.delete_place -->
      <class name="tests.test_for_books.checkMultyBooks">
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:19 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:19 CEST" duration-ms="543" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:19 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:19 CEST" duration-ms="300" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[21]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:19 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:20 CEST" duration-ms="302" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:20 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:20 CEST" duration-ms="302" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[22]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:20 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:20 CEST" duration-ms="301" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:20 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:21 CEST" duration-ms="290" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:21 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-06-17T15:15:21 CEST" duration-ms="310" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="incorrect_Books(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:21 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-06-17T15:15:21 CEST" duration-ms="296" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4221]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:21 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-06-17T15:15:22 CEST" duration-ms="284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3321]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:22 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-06-17T15:15:22 CEST" duration-ms="296" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0022]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(java.lang.String)[pri:0, instance:tests.test_for_books.checkMultyBooks@213860b8]" started-at="2023-06-17T15:15:22 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-06-17T15:15:22 CEST" duration-ms="308" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
      </class> <!-- tests.test_for_books.checkMultyBooks -->
      <class name="tests.test_for_books.add_book_store">
        <test-method signature="BookStore_AddBook_ID()[pri:0, instance:tests.test_for_books.add_book_store@298d9a05]" started-at="2023-06-17T15:15:16 CEST" name="BookStore_AddBook_ID" finished-at="2023-06-17T15:15:17 CEST" duration-ms="638" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Wrong status code expected200 received500]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Wrong status code expected200 received500
at org.testng.Assert.fail(Assert.java:110)
at requests.POST_Request.POSTRequest(POST_Request.java:87)
at tests.test_for_books.add_book_store.BookStore_AddBook_ID(add_book_store.java:38)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_AddBook_ID -->
        <test-method signature="BookStore_AddBook_Msg()[pri:0, instance:tests.test_for_books.add_book_store@298d9a05]" started-at="2023-06-17T15:15:17 CEST" name="BookStore_AddBook_Msg" finished-at="2023-06-17T15:15:18 CEST" duration-ms="520" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Wrong status code expected200 received500]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Wrong status code expected200 received500
at org.testng.Assert.fail(Assert.java:110)
at requests.POST_Request.POSTRequest(POST_Request.java:87)
at tests.test_for_books.add_book_store.BookStore_AddBook_Msg(add_book_store.java:33)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_AddBook_Msg -->
        <test-method signature="BookStore_AddBook_Status()[pri:0, instance:tests.test_for_books.add_book_store@298d9a05]" started-at="2023-06-17T15:15:18 CEST" name="BookStore_AddBook_Status" finished-at="2023-06-17T15:15:18 CEST" duration-ms="526" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Wrong status code expected200 received500]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Wrong status code expected200 received500
at org.testng.Assert.fail(Assert.java:110)
at requests.POST_Request.POSTRequest(POST_Request.java:87)
at tests.test_for_books.add_book_store.BookStore_AddBook_Status(add_book_store.java:28)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_AddBook_Status -->
        <test-method signature="Existing_book()[pri:0, instance:tests.test_for_books.add_book_store@298d9a05]" started-at="2023-06-17T15:15:18 CEST" name="Existing_book" finished-at="2023-06-17T15:15:19 CEST" duration-ms="516" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Wrong status code expected404 received500]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Wrong status code expected404 received500
at org.testng.Assert.fail(Assert.java:110)
at requests.POST_Request.POSTRequest(POST_Request.java:87)
at tests.test_for_books.add_book_store.Existing_book(add_book_store.java:24)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Existing_book -->
      </class> <!-- tests.test_for_books.add_book_store -->
    </test> <!-- /Users/uroskatanic/IdeaProjects/REST-Assured-Framework -->
  </suite> <!-- All Test Suite -->
</testng-results>
