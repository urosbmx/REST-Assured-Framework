<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="27" passed="26" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-03-27T20:50:10 CEST" name="All Test Suite" finished-at="2023-03-27T20:50:26 CEST" duration-ms="15601">
    <groups>
    </groups>
    <test started-at="2023-03-27T20:50:10 CEST" name="/Users/uroskatanic/IdeaProjects/REST-Assured-Framework" finished-at="2023-03-27T20:50:26 CEST" duration-ms="15601">
      <class name="tests.test_for_books.check_book_value">
        <test-method signature="check_book_name()[pri:0, instance:tests.test_for_books.check_book_value@10980560]" started-at="2023-03-27T20:50:12 CEST" name="check_book_name" finished-at="2023-03-27T20:50:12 CEST" duration-ms="760" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- check_book_name -->
        <test-method signature="check_missing_book()[pri:0, instance:tests.test_for_books.check_book_value@10980560]" started-at="2023-03-27T20:50:12 CEST" name="check_missing_book" finished-at="2023-03-27T20:50:13 CEST" duration-ms="379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- check_missing_book -->
      </class> <!-- tests.test_for_books.check_book_value -->
      <class name="tests.fake_google_maps_api.create_place">
        <test-method signature="TestCase01()[pri:0, instance:tests.fake_google_maps_api.create_place@df34b01]" started-at="2023-03-27T20:50:20 CEST" name="TestCase01" finished-at="2023-03-27T20:50:21 CEST" duration-ms="338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase01 -->
        <test-method signature="TestCase02()[pri:0, instance:tests.fake_google_maps_api.create_place@df34b01]" started-at="2023-03-27T20:50:21 CEST" name="TestCase02" finished-at="2023-03-27T20:50:21 CEST" duration-ms="369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase02 -->
        <test-method signature="TestCase03()[pri:0, instance:tests.fake_google_maps_api.create_place@df34b01]" started-at="2023-03-27T20:50:21 CEST" name="TestCase03" finished-at="2023-03-27T20:50:22 CEST" duration-ms="1098" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase03 -->
        <test-method signature="TestCase04()[pri:0, instance:tests.fake_google_maps_api.create_place@df34b01]" started-at="2023-03-27T20:50:22 CEST" name="TestCase04" finished-at="2023-03-27T20:50:23 CEST" duration-ms="814" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase04 -->
        <test-method signature="TestCase05()[pri:0, instance:tests.fake_google_maps_api.create_place@df34b01]" started-at="2023-03-27T20:50:23 CEST" name="TestCase05" finished-at="2023-03-27T20:50:23 CEST" duration-ms="1" status="FAIL">
          <exception class="java.nio.file.NoSuchFileException">
            <message>
              <![CDATA[\Users\uroskatanic\AquaProjects\REST-Assured-Framework\src\test\java\files\test.json]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.nio.file.NoSuchFileException: \Users\uroskatanic\AquaProjects\REST-Assured-Framework\src\test\java\files\test.json
at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)
at java.base/java.nio.file.Files.newByteChannel(Files.java:380)
at java.base/java.nio.file.Files.newByteChannel(Files.java:432)
at java.base/java.nio.file.Files.readAllBytes(Files.java:3288)
at tests.fake_google_maps_api.create_place.TestCase05(create_place.java:90)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.nio.file.NoSuchFileException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase05 -->
      </class> <!-- tests.fake_google_maps_api.create_place -->
      <class name="tests.fake_google_maps_api.get_data_for_place">
        <test-method signature="TestCase01_Get_Data_for_Place()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@47629063]" started-at="2023-03-27T20:50:17 CEST" name="TestCase01_Get_Data_for_Place" finished-at="2023-03-27T20:50:18 CEST" duration-ms="925" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase01_Get_Data_for_Place -->
        <test-method signature="TestCase02_With_Corect_PlaceID()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@47629063]" started-at="2023-03-27T20:50:18 CEST" name="TestCase02_With_Corect_PlaceID" finished-at="2023-03-27T20:50:19 CEST" duration-ms="1656" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestCase02_With_Corect_PlaceID -->
        <test-method signature="testCase03_PlaceID_New()[pri:0, instance:tests.fake_google_maps_api.get_data_for_place@47629063]" started-at="2023-03-27T20:50:19 CEST" name="testCase03_PlaceID_New" finished-at="2023-03-27T20:50:20 CEST" duration-ms="905" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase03_PlaceID_New -->
      </class> <!-- tests.fake_google_maps_api.get_data_for_place -->
      <class name="tests.fake_google_maps_api.delete_place">
        <test-method signature="testCase01DeleteJustCreatedPlace()[pri:0, instance:tests.fake_google_maps_api.delete_place@4bba2704]" started-at="2023-03-27T20:50:23 CEST" name="testCase01DeleteJustCreatedPlace" finished-at="2023-03-27T20:50:24 CEST" duration-ms="1370" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase01DeleteJustCreatedPlace -->
        <test-method signature="testCase02DeleteNotExistingPlaceID()[pri:0, instance:tests.fake_google_maps_api.delete_place@4bba2704]" started-at="2023-03-27T20:50:24 CEST" name="testCase02DeleteNotExistingPlaceID" finished-at="2023-03-27T20:50:26 CEST" duration-ms="1298" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase02DeleteNotExistingPlaceID -->
      </class> <!-- tests.fake_google_maps_api.delete_place -->
      <class name="tests.test_for_books.checkMultyBooks">
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:13 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:13 CEST" duration-ms="352" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:13 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:14 CEST" duration-ms="353" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[21]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:14 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:14 CEST" duration-ms="356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:14 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:14 CEST" duration-ms="356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[22]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:14 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:15 CEST" duration-ms="363" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:15 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:15 CEST" duration-ms="360" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="checkBookID(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:15 CEST" name="checkBookID" data-provider="CorectIDBooks" finished-at="2023-03-27T20:50:15 CEST" duration-ms="371" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkBookID -->
        <test-method signature="incorrect_Books(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:15 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-03-27T20:50:16 CEST" duration-ms="346" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4221]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:16 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-03-27T20:50:16 CEST" duration-ms="369" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3321]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:16 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-03-27T20:50:16 CEST" duration-ms="390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
        <test-method signature="incorrect_Books(int)[pri:0, instance:tests.test_for_books.checkMultyBooks@436a563f]" started-at="2023-03-27T20:50:16 CEST" name="incorrect_Books" data-provider="incorrect_Books" finished-at="2023-03-27T20:50:17 CEST" duration-ms="371" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3123]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- incorrect_Books -->
      </class> <!-- tests.test_for_books.checkMultyBooks -->
      <class name="tests.test_for_books.add_book_store">
        <test-method signature="BookStore_AddBook()[pri:0, instance:tests.test_for_books.add_book_store@3c0fbd3a]" started-at="2023-03-27T20:50:10 CEST" name="BookStore_AddBook" finished-at="2023-03-27T20:50:11 CEST" duration-ms="496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_AddBook -->
        <test-method signature="BookStore_Check_message()[pri:0, instance:tests.test_for_books.add_book_store@3c0fbd3a]" started-at="2023-03-27T20:50:11 CEST" name="BookStore_Check_message" finished-at="2023-03-27T20:50:11 CEST" duration-ms="397" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_Check_message -->
        <test-method signature="BookStore_happyPath()[pri:0, instance:tests.test_for_books.add_book_store@3c0fbd3a]" started-at="2023-03-27T20:50:11 CEST" name="BookStore_happyPath" finished-at="2023-03-27T20:50:11 CEST" duration-ms="357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_happyPath -->
        <test-method signature="BookStore_takeValue()[pri:0, instance:tests.test_for_books.add_book_store@3c0fbd3a]" started-at="2023-03-27T20:50:11 CEST" name="BookStore_takeValue" finished-at="2023-03-27T20:50:12 CEST" duration-ms="355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BookStore_takeValue -->
      </class> <!-- tests.test_for_books.add_book_store -->
    </test> <!-- /Users/uroskatanic/IdeaProjects/REST-Assured-Framework -->
  </suite> <!-- All Test Suite -->
</testng-results>
